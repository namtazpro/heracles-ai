name: Deploy Everything

on: 
  workflow_dispatch:
    inputs:
      alias:
        description: 'Application alias'     
        required: true
        default: 'zed'
      location:
        description: 'Location'     
        required: true
        default: 'uksouth'
      instance:
        description: 'Instance Name'     
        required: true
        default: 'Lucky_Jim'
      logOutput:
        description: 'debug output?'     
        required: true
        default: 'FALSE'
env:
   HERACLES_PAT: ${{ secrets.HERACLES_PAT }}
   DB_ADMIN_PASSWORD: ${{ secrets.DB_ADMIN_PASSWORD }}
   AAD_PASSWORD: ${{ secrets.AAD_PASSWORD }}
   DB_ADMIN_USER: nick
   AAD_DOMAIN: xekina.onmicrosoft.com
   AAD_TENANTID: 3bc03625-3a0a-48c5-8aa5-12f22e401fff
   AAD_CLIENTID: ccee7608-940c-42d9-ba86-a2845ef3a808
   
   HERACLES_LOCATION: ${{ github.event.inputs.location }}
   HERACLES_INSTANCE: ${{ github.event.inputs.instance }}
   OUTPUT_LOG_NAME: "deployment-log.html"
   HERACLES_OUTPUT_LOGGING: ${{ github.event.inputs.logOutput }}
   HERACLES_ALIAS: ${{ github.event.inputs.alias }}heracles
   CHANIA_ALIAS: ${{ github.event.inputs.alias }}chania
   IOANNINA_ALIAS: ${{ github.event.inputs.alias }}ioannina
   PATRA_ALIAS: ${{ github.event.inputs.alias }}patra
   IRAKLION_ALIAS: ${{ github.event.inputs.alias }}iraklion
   THESSALONIKI_ALIAS: ${{ github.event.inputs.alias }}thessaloniki 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job1:
    name: Parse Global Parameters
    runs-on: ubuntu-latest
    outputs:
      alias: ${{ steps.step1.outputs.alias }}
    steps:
    - uses: actions/checkout@v2
    - id: step1
      name: Parse Parameter File
      run: |
            alias=$(jq .alias setup-parameters.json -r)
            echo "::set-output name=alias::$alias"
  job2:
    name: Create Heracles Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        id: step1
                    
      - name: Login to Azure
        uses: azure/login@v1
        id: step2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
   
      - name: Run Deployment Scripts
        id: step3
        run: |
                chmod +x deployment-scripts/deploy_infrastructure.sh
                chmod +x deployment-scripts/deploy_chania.sh
                chmod +x deployment-scripts/deploy_thessaloniki.sh
                chmod +x deployment-scripts/deploy_iraklion.sh
                chmod +x deployment-scripts/deploy_patra.sh
                chmod +x deployment-scripts/deploy_ioannina.sh
                chmod +x deployment-scripts/deploy_heracles.sh
                deployment-scripts/deploy_infrastructure.sh
  job3:
    name: Update ACR_PASSWORD secret
    runs-on: ubuntu-latest
    needs: [job2]
    steps:
    - uses: actions/checkout@v2

    - id: step1
      name: Get Repo public key
      run: |
            #!/bin/sh -e
            res=$(curl --location --request GET "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/public-key" \
               --header "Authorization: Bearer $HERACLES_PAT" \
               --header 'Cookie: logged_in=no; _octo=GH1.1.1387838137.1581271944')
            repo_public_key=$(echo $res | jq .key -r)
            repo_public_key_id=$(echo $res | jq .key_id -r)
            echo "repo_public_key=$repo_public_key" >> $GITHUB_ENV
            echo "repo_public_key_id=$repo_public_key_id" >> $GITHUB_ENV

    - id: step2
      name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - id: step3
      name: Get ACR password
      run: |
           applicationName="${HERACLES_ALIAS}"
           acrName="${applicationName}acr"
           acrPassword=$(az acr credential show -n $acrName --query passwords[0].value -o tsv)
           echo "acr_password=$acrPassword" >> $GITHUB_ENV

    - id: step4
      name: Encrypt Secret
      run: |
          #!/bin/sh -e
          npm init -y
          npm install tweetsodium
          echo "acr_password=$acr_password"
          encrypted_value=$(node deployment-scripts/encrypt_secret.js "$acr_password" "$repo_public_key")
          echo "encrypted_value=$encrypted_value" >> $GITHUB_ENV
          
    - id: step5
      name: Store Secret
      run: |
           #!/bin/sh -e
           curl_body=$(jq -n --arg key_id "$repo_public_key_id" --arg encrypted_value "$encrypted_value" '{encrypted_value: $encrypted_value, key_id: $key_id}')
           echo "CURL_BODY=$curl_body"
           curl --location --request PUT "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/secrets/ACR_PASSWORD" \
            --header "Authorization: Bearer $HERACLES_PAT" \
            --header 'Content-Type: application/json' \
            --header 'Cookie: logged_in=no; _octo=GH1.1.1387838137.1581271944' \
            --data-raw "$curl_body"

  job4:
    name: Deploy Chania Application
    runs-on: ubuntu-latest
    needs: [job3]
    steps:
    - uses: actions/checkout@v2

    - id: step1
      name: Setup .NET Core 3.1.101
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    - id: step2
      name: Build Chania
      run: dotnet build chania/chania.Web.csproj --configuration Debug

    - 